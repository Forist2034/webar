use std::fmt::Display;

use serde::Deserialize;

use webar_data::ser::Serialize;

macro_rules! site {
    (enum $i:ident { $($n:ident = $param:literal,)+ }) => {
        #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
        pub enum $i {
            $($n,)+
        }
        impl $i {
            pub const fn as_str(self) -> &'static str {
                match self {
                    $(Self::$n => $param,)+
                }
            }
            pub fn from_str(s: &str) -> Option<Self> {
                static MAP: phf::Map<&'static str, $i> = phf::phf_map! {
                    $($param => $i::$n,)+
                };
                MAP.get(s).copied()
            }
        }
    };
}

site!(
    enum KnownSite {
        ThreeDPrinting = "3dprinting",
        ThreeDPrintingMeta = "3dprinting.meta",
        Academia = "academia",
        AcademiaMeta = "academia.meta",
        ArtificialIntelligence = "ai",
        ArtificialIntelligenceMeta = "ai.meta",
        BeerWineAndSpirits = "alcohol",
        BeerWineAndSpiritsMeta = "alcohol.meta",
        AndroidEnthusiasts = "android",
        AndroidEnthusiastsMeta = "android.meta",
        AnimeAndManga = "anime",
        AnimeAndMangaMeta = "anime.meta",
        AskDifferent = "apple",
        AskDifferentMeta = "apple.meta",
        Arduino = "arduino",
        ArduinoMeta = "arduino.meta",
        AskUbuntu = "askubuntu",
        Astronomy = "astronomy",
        AstronomyMeta = "astronomy.meta",
        Aviation = "aviation",
        AviationMeta = "aviation.meta",
        Bicycles = "bicycles",
        BicyclesMeta = "bicycles.meta",
        Bioacoustics = "bioacoustics",
        BioacousticsMeta = "bioacoustics.meta",
        Bioinformatics = "bioinformatics",
        BioinformaticsMeta = "bioinformatics.meta",
        Biology = "biology",
        BiologyMeta = "biology.meta",
        Bitcoin = "bitcoin",
        BitcoinMeta = "bitcoin.meta",
        Blender = "blender",
        BlenderMeta = "blender.meta",
        BoardAndCardGames = "boardgames",
        BoardAndCardGamesMeta = "boardgames.meta",
        Bricks = "bricks",
        BricksMeta = "bricks.meta",
        Buddhism = "buddhism",
        BuddhismMeta = "buddhism.meta",
        Cardano = "cardano",
        CardanoMeta = "cardano.meta",
        Chemistry = "chemistry",
        ChemistryMeta = "chemistry.meta",
        Chess = "chess",
        ChessMeta = "chess.meta",
        ChineseLanguage = "chinese",
        ChineseLanguageMeta = "chinese.meta",
        Christianity = "christianity",
        ChristianityMeta = "christianity.meta",
        CiviCRM = "civicrm",
        CiviCRMMeta = "civicrm.meta",
        CodeGolf = "codegolf",
        CodeGolfMeta = "codegolf.meta",
        CodeReview = "codereview",
        CodeReviewMeta = "codereview.meta",
        Coffee = "coffee",
        CoffeeMeta = "coffee.meta",
        CommunityBuilding = "communitybuilding",
        CommunityBuildingMeta = "communitybuilding.meta",
        ComputerGraphics = "computergraphics",
        ComputerGraphicsMeta = "computergraphics.meta",
        ConstructedLanguages = "conlang",
        ConstructedLanguagesMeta = "conlang.meta",
        SeasonedAdvice = "cooking",
        SeasonedAdviceMeta = "cooking.meta",
        CraftCMS = "craftcms",
        CraftCMSMeta = "craftcms.meta",
        ArtsAndCrafts = "crafts",
        ArtsAndCraftsMeta = "crafts.meta",
        Cryptography = "crypto",
        CryptographyMeta = "crypto.meta",
        ComputerScience = "cs",
        ComputerScienceMeta = "cs.meta",
        CS50 = "cs50",
        CS50Meta = "cs50.meta",
        ComputerScienceEducators = "cseducators",
        ComputerScienceEducatorsMeta = "cseducators.meta",
        TheoreticalComputerScience = "cstheory",
        TheoreticalComputerScienceMeta = "cstheory.meta",
        DataScience = "datascience",
        DataScienceMeta = "datascience.meta",
        DatabaseAdministrators = "dba",
        DatabaseAdministratorsMeta = "dba.meta",
        DevOps = "devops",
        DevOpsMeta = "devops.meta",
        HomeImprovement = "diy",
        HomeImprovementMeta = "diy.meta",
        DronesandModelAircraft = "drones",
        DronesandModelAircraftMeta = "drones.meta",
        DrupalAnswers = "drupal",
        DrupalAnswersMeta = "drupal.meta",
        SignalProcessing = "dsp",
        SignalProcessingMeta = "dsp.meta",
        EarthScience = "earthscience",
        EarthScienceMeta = "earthscience.meta",
        Ebooks = "ebooks",
        EbooksMeta = "ebooks.meta",
        Economics = "economics",
        EconomicsMeta = "economics.meta",
        ElectricalEngineering = "electronics",
        ElectricalEngineeringMeta = "electronics.meta",
        ElementaryOS = "elementaryos",
        ElementaryOSMeta = "elementaryos.meta",
        EnglishLanguageLearners = "ell",
        EnglishLanguageLearnersMeta = "ell.meta",
        Emacs = "emacs",
        EmacsMeta = "emacs.meta",
        Engineering = "engineering",
        EngineeringMeta = "engineering.meta",
        EnglishLanguageAndUsage = "english",
        EnglishLanguageAndUsageMeta = "english.meta",
        EOSIO = "eosio",
        EOSIOMeta = "eosio.meta",
        StackOverflowMetaEnEspanol = "es.meta.stackoverflow",
        StackOverflowEnEspanol = "es.stackoverflow",
        EsperantoLanguage = "esperanto",
        EsperantoLanguageMeta = "esperanto.meta",
        Ethereum = "ethereum",
        EthereumMeta = "ethereum.meta",
        Expatriates = "expatriates",
        ExpatriatesMeta = "expatriates.meta",
        ExpressionEngineAnswers = "expressionengine",
        ExpressionEngineAnswersMeta = "expressionengine.meta",
        PhysicalFitness = "fitness",
        PhysicalFitnessMeta = "fitness.meta",
        Freelancing = "freelancing",
        FreelancingMeta = "freelancing.meta",
        FrenchLanguage = "french",
        FrenchLanguageMeta = "french.meta",
        GameDevelopment = "gamedev",
        GameDevelopmentMeta = "gamedev.meta",
        Arqade = "gaming",
        ArqadeMeta = "gaming.meta",
        GardeningAndLandscaping = "gardening",
        GardeningAndLandscapingMeta = "gardening.meta",
        GenAI = "genai",
        GenAIMeta = "genai.meta",
        GenealogyAndFamilyHistory = "genealogy",
        GenealogyAndFamilyHistoryMeta = "genealogy.meta",
        GermanLanguage = "german",
        GermanLanguageMeta = "german.meta",
        GeographicInformationSystems = "gis",
        GeographicInformationSystemsMeta = "gis.meta",
        GraphicDesign = "graphicdesign",
        GraphicDesignMeta = "graphicdesign.meta",
        AmateurRadio = "ham",
        AmateurRadioMeta = "ham.meta",
        HardwareRecommendations = "hardwarerecs",
        HardwareRecommendationsMeta = "hardwarerecs.meta",
        BiblicalHermeneutics = "hermeneutics",
        BiblicalHermeneuticsMeta = "hermeneutics.meta",
        Hinduism = "hinduism",
        HinduismMeta = "hinduism.meta",
        History = "history",
        HistoryMeta = "history.meta",
        Homebrewing = "homebrew",
        HomebrewingMeta = "homebrew.meta",
        HistoryofScienceandMathematics = "hsm",
        HistoryofScienceandMathematicsMeta = "hsm.meta",
        InterpersonalSkills = "interpersonal",
        InterpersonalSkillsMeta = "interpersonal.meta",
        InternetofThings = "iot",
        InternetofThingsMeta = "iot.meta",
        Iota = "iota",
        IotaMeta = "iota.meta",
        Islam = "islam",
        IslamMeta = "islam.meta",
        ItalianLanguage = "italian",
        ItalianLanguageMeta = "italian.meta",
        StackOverflowJaMeta = "ja.meta.stackoverflow",
        StackOverflowJa = "ja.stackoverflow",
        JapaneseLanguage = "japanese",
        JapaneseLanguageMeta = "japanese.meta",
        Joomla = "joomla",
        JoomlaMeta = "joomla.meta",
        MiYodeya = "judaism",
        MiYodeyaMeta = "judaism.meta",
        KoreanLanguage = "korean",
        KoreanLanguageMeta = "korean.meta",
        ProgrammingLanguageDesignandImplementation = "langdev",
        ProgrammingLanguageDesignandImplementationMeta = "langdev.meta",
        LanguageLearning = "languagelearning",
        LanguageLearningMeta = "languagelearning.meta",
        LatinLanguage = "latin",
        LatinLanguageMeta = "latin.meta",
        Law = "law",
        LawMeta = "law.meta",
        Lifehacks = "lifehacks",
        LifehacksMeta = "lifehacks.meta",
        Linguistics = "linguistics",
        LinguisticsMeta = "linguistics.meta",
        Literature = "literature",
        LiteratureMeta = "literature.meta",
        Magento = "magento",
        MagentoMeta = "magento.meta",
        MartialArts = "martialarts",
        MartialArtsMeta = "martialarts.meta",
        Mathematics = "math",
        MathematicsMeta = "math.meta",
        MathematicsEducators = "matheducators",
        MathematicsEducatorsMeta = "matheducators.meta",
        Mathematica = "mathematica",
        MathematicaMeta = "mathematica.meta",
        MathOverflow = "mathoverflow.net",
        MatterModeling = "mattermodeling",
        MatterModelingMeta = "mattermodeling.meta",
        MotorVehicleMaintenanceAndRepair = "mechanics",
        MotorVehicleMaintenanceAndRepairMeta = "mechanics.meta",
        MedicalSciences = "medicalsciences",
        MedicalSciencesMeta = "medicalsciences.meta",
        MetaStackExchange = "meta",
        AskUbuntuMeta = "meta.askubuntu",
        MathOverflowMeta = "meta.mathoverflow.net",
        MetaServerFault = "meta.serverfault",
        MetaStackOverflow = "meta.stackoverflow",
        MetaSuperUser = "meta.superuser",
        Monero = "monero",
        MoneroMeta = "monero.meta",
        PersonalFinanceAndMoney = "money",
        PersonalFinanceAndMoneyMeta = "money.meta",
        MoviesAndTV = "movies",
        MoviesAndTVMeta = "movies.meta",
        MusicPracticeAndTheory = "music",
        MusicPracticeAndTheoryMeta = "music.meta",
        MusicFans = "musicfans",
        MusicFansMeta = "musicfans.meta",
        MythologyAndFolklore = "mythology",
        MythologyAndFolkloreMeta = "mythology.meta",
        NetworkEngineering = "networkengineering",
        NetworkEngineeringMeta = "networkengineering.meta",
        OpenData = "opendata",
        OpenDataMeta = "opendata.meta",
        OpenSource = "opensource",
        OpenSourceMeta = "opensource.meta",
        OperationsResearch = "or",
        OperationsResearchMeta = "or.meta",
        TheGreatOutdoors = "outdoors",
        TheGreatOutdoorsMeta = "outdoors.meta",
        Parenting = "parenting",
        ParentingMeta = "parenting.meta",
        AskPatents = "patents",
        AskPatentsMeta = "patents.meta",
        Pets = "pets",
        PetsMeta = "pets.meta",
        Philosophy = "philosophy",
        PhilosophyMeta = "philosophy.meta",
        Photography = "photo",
        PhotographyMeta = "photo.meta",
        Physics = "physics",
        PhysicsMeta = "physics.meta",
        ProjectManagement = "pm",
        ProjectManagementMeta = "pm.meta",
        Poker = "poker",
        PokerMeta = "poker.meta",
        Politics = "politics",
        PoliticsMeta = "politics.meta",
        PortugueseLanguage = "portuguese",
        PortugueseLanguageMeta = "portuguese.meta",
        ProofAssistants = "proofassistants",
        ProofAssistantsMeta = "proofassistants.meta",
        PsychologyAndNeuroscience = "psychology",
        PsychologyAndNeuroscienceMeta = "psychology.meta",
        StackOverflowemPortuguesMeta = "pt.meta.stackoverflow",
        StackOverflowemPortugues = "pt.stackoverflow",
        Puzzling = "puzzling",
        PuzzlingMeta = "puzzling.meta",
        QuantitativeFinance = "quant",
        QuantitativeFinanceMeta = "quant.meta",
        QuantumComputing = "quantumcomputing",
        QuantumComputingMeta = "quantumcomputing.meta",
        RaspberryPi = "raspberrypi",
        RaspberryPiMeta = "raspberrypi.meta",
        Retrocomputing = "retrocomputing",
        RetrocomputingMeta = "retrocomputing.meta",
        ReverseEngineering = "reverseengineering",
        ReverseEngineeringMeta = "reverseengineering.meta",
        Robotics = "robotics",
        RoboticsMeta = "robotics.meta",
        RolePlayingGames = "rpg",
        RolePlayingGamesMeta = "rpg.meta",
        StackOverflowRuMeta = "ru.meta.stackoverflow",
        StackOverflowRu = "ru.stackoverflow",
        Rus = "rus",
        RusMeta = "rus.meta",
        RussianLanguage = "russian",
        RussianLanguageMeta = "russian.meta",
        Salesforce = "salesforce",
        SalesforceMeta = "salesforce.meta",
        ComputationalScience = "scicomp",
        ComputationalScienceMeta = "scicomp.meta",
        ScienceFictionAndFantasy = "scifi",
        ScienceFictionAndFantasyMeta = "scifi.meta",
        InformationSecurity = "security",
        InformationSecurityMeta = "security.meta",
        ServerFault = "serverfault",
        SharePoint = "sharepoint",
        SharePointMeta = "sharepoint.meta",
        Sitecore = "sitecore",
        SitecoreMeta = "sitecore.meta",
        Skeptics = "skeptics",
        SkepticsMeta = "skeptics.meta",
        SoftwareEngineering = "softwareengineering",
        SoftwareEngineeringMeta = "softwareengineering.meta",
        SoftwareRecommendations = "softwarerecs",
        SoftwareRecommendationsMeta = "softwarerecs.meta",
        Solana = "solana",
        SolanaMeta = "solana.meta",
        SoundDesign = "sound",
        SoundDesignMeta = "sound.meta",
        SpaceExploration = "space",
        SpaceExplorationMeta = "space.meta",
        SpanishLanguage = "spanish",
        SpanishLanguageMeta = "spanish.meta",
        Sports = "sports",
        SportsMeta = "sports.meta",
        SoftwareQualityAssuranceAndTesting = "sqa",
        SoftwareQualityAssuranceAndTestingMeta = "sqa.meta",
        StackApps = "stackapps",
        StackOverflow = "stackoverflow",
        CrossValidated = "stats",
        CrossValidatedMeta = "stats.meta",
        Stellar = "stellar",
        StellarMeta = "stellar.meta",
        SubstrateandPolkadot = "substrate",
        SubstrateandPolkadotMeta = "substrate.meta",
        SuperUser = "superuser",
        SustainableLiving = "sustainability",
        SustainableLivingMeta = "sustainability.meta",
        TeXLaTeX = "tex",
        TeXLaTeXMeta = "tex.meta",
        Tezos = "tezos",
        TezosMeta = "tezos.meta",
        Tor = "tor",
        TorMeta = "tor.meta",
        Travel = "travel",
        TravelMeta = "travel.meta",
        Tridion = "tridion",
        TridionMeta = "tridion.meta",
        UkrainianLanguage = "ukrainian",
        UkrainianLanguageMeta = "ukrainian.meta",
        UnixAndLinux = "unix",
        UnixAndLinuxMeta = "unix.meta",
        UserExperience = "ux",
        UserExperienceMeta = "ux.meta",
        VeganismAndVegetarianism = "vegetarianism",
        VeganismAndVegetarianismMeta = "vegetarianism.meta",
        ViandVim = "vi",
        ViandVimMeta = "vi.meta",
        VideoProduction = "video",
        VideoProductionMeta = "video.meta",
        WebApplications = "webapps",
        WebApplicationsMeta = "webapps.meta",
        Webmasters = "webmasters",
        WebmastersMeta = "webmasters.meta",
        Woodworking = "woodworking",
        WoodworkingMeta = "woodworking.meta",
        WordPressDevelopment = "wordpress",
        WordPressDevelopmentMeta = "wordpress.meta",
        TheWorkplace = "workplace",
        TheWorkplaceMeta = "workplace.meta",
        Worldbuilding = "worldbuilding",
        WorldbuildingMeta = "worldbuilding.meta",
        Writing = "writing",
        WritingMeta = "writing.meta",
    }
);

impl Display for KnownSite {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(self.as_str())
    }
}
impl AsRef<str> for KnownSite {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl Serialize for KnownSite {
    fn serialize<S: webar_data::ser::Serializer>(&self, serializer: S) -> Result<S::Ok, S::Error> {
        serializer.serialize_unit_variant(self.as_str())
    }
}
impl<'de> Deserialize<'de> for KnownSite {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = KnownSite;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("api site parameter")
            }
            fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>
            where
                E: serde::de::Error,
            {
                match KnownSite::from_str(v) {
                    Some(v) => Ok(v),
                    None => Err(E::invalid_value(serde::de::Unexpected::Str(v), &self)),
                }
            }
        }
        deserializer.deserialize_str(Visitor)
    }
}
